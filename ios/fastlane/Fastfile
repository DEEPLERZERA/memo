default_platform(:ios)

platform :ios do

  ########################--------------------------------########################
  ########################--------- SETUP LANES ----------########################
  ########################--------------------------------########################

  # Environment Setup
  ## Setup local environment configuraiton. If running on a CI machine we need to create a keychain to store the 
  ## distribution certificates
  private_lane :setup_environment do
    if is_ci
      create_keychain(
        name: ENV["KEYCHAIN_NAME"],
        password: ENV["KEYCHAIN_PASSWORD"],
        default_keychain: true,
        unlock: true,
        timeout: 3600,
        lock_when_sleeps: false
      )
    end
  end

  # Provisions and Certificates Setup
  ## Download and setup all necessary provisions and certificates (Dev & Dist)
  desc "Setup Development & Distribution profiles and certificates in the local machine"
  lane :setup_provisions do
    setup_environment

    # Install Distribution Provisions and Certificates
    match(
      app_identifier: "com.olmps.memoClient",
      type: "appstore",
      readonly: true,
      keychain_name: ENV["KEYCHAIN_NAME"],
      keychain_password: ENV["KEYCHAIN_PASSWORD"],
      verbose: true,
    )

    # Install Development Provisions and Certificates
    match(
      app_identifier: "com.olmps.memoClient",
      type: "development",
      readonly: true,
      keychain_name: ENV["KEYCHAIN_NAME"],
      keychain_password: ENV["KEYCHAIN_PASSWORD"],
      verbose: true,
    )
  end
  
  ########################--------------------------------########################
  ########################--------- BUILD LANES ----------########################
  ########################--------------------------------########################

  # Check prerequisites for build and release:
  #   - Clean the project
  #   - Run tests
  #   - Run Analyzer
  private_lane :check_prerequisites do
    # Clean
    sh("flutter", "clean")

    # Run tests
    sh("flutter", "test", "test")

    # Run Analyzer
    sh("flutter", "analyze", ".")
  end

  # Setup and build the app
  ## Setup provision, certificates, run check_prerequisites and build the app in production env
  lane :build do
    # Setup provision profiles
    setup_provisions

    # Check prerequisites
    check_prerequisites

    # Run flutter build with release mode
    sh("flutter", "build", "ios", "--release", "--dart-define=ENV=PROD")
  end

  ########################--------------------------------########################
  ########################-------- RELEASE LANE ----------########################
  ########################--------------------------------########################

  # Release a new version to Testflight
  #
  # It assumes that the app version is correctly set.
  # The lane increments the build number if necessary
  desc "Release app to Testflight"
  lane :release do
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_API_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY"],
      in_house: false,
    )
    
    # Setup provision profiles
    setup_provisions

    # Clean and build the app
    build

    # Increment the build number (use the latest build number for this version + 1)
    increment_build_number(
      build_number: latest_testflight_build_number(
        initial_build_number: 0, 
        api_key: api_key, 
        version: get_version_number
      ) + 1,
      xcodeproj: "Runner.xcodeproj",
    )

    # Build the app
    build_ios_app(
      scheme: "Runner",
      export_options: {
        method: "app-store",
        provisioningProfiles: { 
          "com.olmps.memoClient" => "match AppStore com.olmps.memoClient"
        }
      }
    )

    # Upload dSYM files to Firebae Crashlytics
    # TODO

    # Upload to Testflight
    changelog = File.read("Changelog.txt")

    upload_to_testflight(
      api_key: api_key,
      skip_waiting_for_build_processing: true,
      distribute_external: true,
      changelog: changelog
    )

    # Clean local dSYM and IPA files
    clean_build_artifacts
  end
end
